

using System.Security.Claims;
using System.Security.Cryptography;

using Microsoft.IdentityModel.JsonWebTokens;
using Microsoft.IdentityModel.Tokens;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Protocols.OpenIdConnect;
var rsakey= RSA.Create();
rsakey.ImportRSAPrivateKey(File.ReadAllBytes("key"), out _);



var builder = WebApplication.CreateBuilder(args);
builder.Services.AddAuthentication("jwt")
    .AddJwtBearer("jwt", o =>
    {
        o.TokenValidationParameters = new TokenValidationParameters()
        {
            ValidateAudience = false,
            ValidateIssuer = false,
        };


        o.Events = new JwtBearerEvents()
        {
            OnMessageReceived = (ctx) =>
            {
                if (ctx.Request.Query.ContainsKey("t"))
                {
                    ctx.Token = ctx.Request.Query["t"];
                }
                return Task.CompletedTask;
            }
        };

        o.Configuration = new OpenIdConnectConfiguration()
        {
            SigningKeys =
            {
                new RsaSecurityKey(rsakey)
            }
        };

        o.MapInboundClaims = false;

    });

var app = builder.Build();

app.UseAuthentication();

app.MapGet("/", (HttpContext ctx) => ctx.User.FindFirst("sub").Value ??"empty");

app.MapGet("/jwt", () =>
{
    var handler = new JsonWebTokenHandler();
    var key = new RsaSecurityKey(rsakey);

    var token = handler.CreateToken(new SecurityTokenDescriptor()
    {
        Issuer = "http://localhost:5013",
        Subject = new ClaimsIdentity(new[]
        {
            new Claim("sub",Guid.NewGuid().ToString()),
            new Claim("name","anton")
        }),
        SigningCredentials = new SigningCredentials(key, SecurityAlgorithms.RsaSha256)
    }) ;

    return token;
});


app.MapGet("jwk", () =>
{
    var publickey = RSA.Create();
    publickey.ImportRSAPublicKey(rsakey.ExportRSAPublicKey(), out _);
    var key = new RsaSecurityKey(publickey);
    return JsonWebKeyConverter.ConvertFromRSASecurityKey(key);
});


app.MapGet("jwk-private", () =>
{
    var key = new RsaSecurityKey(rsakey);
    return JsonWebKeyConverter.ConvertFromRSASecurityKey(key);
});

app.Run();
